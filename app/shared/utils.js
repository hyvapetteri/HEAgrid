"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function db2a(db) {
    return Math.pow(10, db / 20);
}
exports.db2a = db2a;
function a2db(a) {
    return 20 * Math.log10(a);
}
exports.a2db = a2db;
function max(x) {
    var maxval = -Infinity;
    for (var i = 0; i < x.length; i++) {
        if (x[i] > maxval) {
            maxval = x[i];
        }
    }
    return maxval;
}
exports.max = max;
function hasNan(x) {
    for (var i = 0; i < x.length; i++) {
        if (Number.isNaN(x[i])) {
            return true;
        }
    }
    return false;
}
exports.hasNan = hasNan;
function min(x) {
    var minval = Infinity;
    for (var i = 0; i < x.length; i++) {
        if (x[i] < minval) {
            minval = x[i];
        }
    }
    return minval;
}
exports.min = min;
function head(x, n) {
    var output = new Float32Array(n);
    var str = "";
    for (var i = 0; i < n; i++) {
        str += x[i] + " ";
        output[i] = x[i];
    }
    console.log(str);
    return output;
}
exports.head = head;
function abs(x) {
    var y = new Float32Array(x.length);
    for (var i = 0; i < x.length; i++) {
        y[i] = Math.abs(x[i]);
    }
    return y;
}
exports.abs = abs;
/** Generate normally distributed samples with the Marsaglia polar method,
* which transforms uniformly distributed variables to normal distribution.
* @param mean Desired mean of the normal distribution
* @param std Desired standard deviation of the normal distribution
* @returns A function which returns a random sample from the desired distribution when called
*/
function initRandn(mean, std) {
    var hasSpareSample = false;
    var spareSample;
    return function () {
        if (hasSpareSample) {
            hasSpareSample = false;
            return spareSample * std + mean;
        }
        else {
            var u = void 0, v = void 0, s = void 0;
            do {
                u = Math.random() * 2 - 1;
                v = Math.random() * 2 - 1;
                s = (u * u) + (v * v);
            } while (s >= 1 || s == 0);
            var mul = Math.sqrt(-2.0 * Math.log(s) / s);
            spareSample = v * mul;
            hasSpareSample = true;
            return mean + (std * u * mul);
        }
    };
}
exports.initRandn = initRandn;
;
/**
* Takes a fourier transform of a signal and returns a copy where
* the coefficients outside the passband are set to zero
*
* @param in Input vector containing a signal's discrete fourier transform
* @param flow Lower cutoff frequency in Hz
* @param fhigh Upper cutoff frequency in Hz
* @param fs Sampling rate in Hz
* @returns A fourier transform of a signal where only the passband is nonzero
*/
function boxcar_spectrum(input, flow, fhigh, fs) {
    var len = input.real.length;
    var flow_idx = Math.round(flow * len / (fs / 2));
    var fhigh_idx = Math.round(fhigh * len / (fs / 2));
    var cut_real = new Float32Array(len);
    var cut_imag = new Float32Array(len);
    // console.log("BOXCAR: flow " + flow + " fhigh " + fhigh + " / fs/2 " + (fs/2));
    // console.log('BOXCAR: flow_idx: ' + flow_idx + ', fhigh_idx: ' + fhigh_idx + ' / len ' + len);
    cut_real.set(input.real.slice(flow_idx, fhigh_idx + 1), flow_idx);
    cut_imag.set(input.imag.slice(flow_idx, fhigh_idx + 1), flow_idx);
    if (flow_idx == 0) {
        cut_real[0] = input.real[0];
    }
    if (fhigh_idx == len) {
        cut_imag[0] = input.imag[0];
    }
    var output = {
        real: cut_real,
        imag: cut_imag
    };
    return output;
}
exports.boxcar_spectrum = boxcar_spectrum;
function rms(input) {
    var output = new interop.Reference();
    vDSP_rmsqv(interop.handleof(input), 1, output, input.length);
    return output.value;
}
exports.rms = rms;
function rms_spect(input) {
    var output = 0;
    for (var i = 0; i < input.real.length; i++) {
        output += Math.pow(input.real[i], 2) + Math.pow(input.imag[i], 2);
    }
    output /= input.real.length;
    return Math.sqrt(output);
}
exports.rms_spect = rms_spect;
function setSignalLevel(input, targetLeveldB, normalize) {
    var output = new Float32Array(input.length);
    var rms_value = rms(input);
    var targetLevelMultiplier = Math.pow(10, targetLeveldB / 20);
    var multiplier = targetLevelMultiplier;
    if (normalize) {
        multiplier = multiplier / rms_value;
    }
    var multiplier_ref = new interop.Reference(multiplier);
    vDSP_vsmul(interop.handleof(input), 1, multiplier_ref, interop.handleof(output), 1, input.length);
    return output;
}
exports.setSignalLevel = setSignalLevel;
function fft(input, nfft) {
    //console.log("Input length: "+ input.length + " max: " + max(input) + ", min: " + min(input));
    // head(input, 20);
    var input_padded = new Float32Array(nfft);
    input_padded.set(input);
    var fft_setup = vDSP_DFT_zrop_CreateSetup(null, nfft, 1 /* FORWARD */);
    if (fft_setup === null) {
        console.log("FFT setup failed!");
    }
    else {
        //console.log("FFT setup type: " + typeof(fft_setup));
    }
    var ir = new Float32Array(nfft / 2);
    var ii = new Float32Array(nfft / 2);
    var or = new Float32Array(nfft / 2);
    var oi = new Float32Array(nfft / 2);
    for (var i = 0; i < nfft / 2; i++) {
        if (Number.isNaN(input_padded[i * 2]) || (input_padded[i * 2] === undefined)) {
            console.log("input " + i + "*2 is NaN");
        }
        if (Number.isNaN(input_padded[i * 2 + 1])) {
            console.log("input " + i + "*2 + 1 is NaN");
        }
        ir[i] = input_padded[i * 2];
        ii[i] = input_padded[i * 2 + 1];
    }
    // console.log("FFT input rms PRE: hasNaN: " + hasNan(ir) + ", real max  " + max(ir) + ", min " + min(ir) + ", imag max " + max(ii) + ", min " + min(ii));
    vDSP_DFT_Execute(fft_setup, interop.handleof(ir), interop.handleof(ii), interop.handleof(or), interop.handleof(oi));
    var output = {
        real: or,
        imag: oi
    };
    // console.log("FFT output has NaN real: " + hasNan(or) + ", imag: "+ hasNan(ir) + " rms: " + rms_spect(output) + ", real max  " + max(or) + ", min " + min(or) + ", imag max " + max(oi) + ", min " + min(oi));
    vDSP_DFT_DestroySetup(fft_setup); // free resources
    // head(output.real, 20);
    return output;
}
exports.fft = fft;
function ifft(input, nifft) {
    var ifft_setup = vDSP_DFT_zrop_CreateSetup(null, nifft, -1 /* INVERSE */);
    var or = new Float32Array(nifft / 2);
    var oi = new Float32Array(nifft / 2);
    vDSP_DFT_Execute(ifft_setup, interop.handleof(input.real), interop.handleof(input.imag), interop.handleof(or), interop.handleof(oi));
    var output = new Float32Array(nifft);
    for (var i = 0; i < nifft / 2; i++) {
        output[i * 2] = or[i] / nifft;
        output[i * 2 + 1] = oi[i] / nifft;
    }
    vDSP_DFT_DestroySetup(ifft_setup);
    // console.log("IFFT output rms: " + rms(output));
    return output;
}
exports.ifft = ifft;
/** Return the next number from n that is a power of two */
function getNextPowerOf2(n) {
    return Math.pow(2, Math.ceil(Math.log2(n)));
}
exports.getNextPowerOf2 = getNextPowerOf2;
var WindowType;
(function (WindowType) {
    WindowType[WindowType["Linear"] = 0] = "Linear";
    WindowType[WindowType["RaisedCosine"] = 1] = "RaisedCosine";
})(WindowType = exports.WindowType || (exports.WindowType = {}));
function applyWindow(input, windowType, duration, fs) {
    var rampUp = new Float32Array(Math.round(duration * fs));
    switch (windowType) {
        case WindowType.Linear: {
            for (var i = 0; i < rampUp.length; i++) {
                rampUp[i] = i / rampUp.length;
            }
            break;
        }
        case WindowType.RaisedCosine: {
            for (var i = 0; i < rampUp.length; i++) {
                rampUp[i] = (1 + Math.cos(Math.PI + (i / rampUp.length) * Math.PI)) / 2;
            }
            break;
        }
    }
    var win = new Float32Array(input.length);
    for (var i = 0; i < rampUp.length; i++) {
        win[i] = rampUp[i];
    }
    for (var i = rampUp.length; i < (win.length - rampUp.length); i++) {
        win[i] = 1;
    }
    for (var i = (win.length - rampUp.length), j = rampUp.length - 1; i < win.length; i++, j--) {
        win[i] = rampUp[j];
    }
    var output = new Float32Array(input.length);
    vDSP_vmul(interop.handleof(input), 1, interop.handleof(win), 1, interop.handleof(output), 1, input.length);
    return output;
}
exports.applyWindow = applyWindow;
function calfilter(headphoneFilter, calLevel, targetLevel, input) {
    var fixedAttenuation = 18;
    var len_input = input.length;
    var len_filt = headphoneFilter.length;
    var input_padded = new Float32Array(len_input + len_filt - 1);
    var rms1_input = setSignalLevel(input, 0, true); // normalize to RMS = 1
    input_padded.set(rms1_input);
    var output = new Float32Array(len_input);
    vDSP_desamp(interop.handleof(input_padded), 1, interop.handleof(headphoneFilter), interop.handleof(output), output.length, len_filt);
    // let nfft = getNextPowerOf2(len_input + len_filt - 1);
    // let rms1_input_padded = new Float32Array(nfft);
    // rms1_input_padded.set(rms1_input);
    // let filt_padded = new Float32Array(nfft);
    // filt_padded.set(headphoneFilter);
    //
    // let input_fft:ComplexContainer = fft(rms1_input_padded, nfft);
    // let filt_fft:ComplexContainer = fft(filt_padded, nfft);
    // console.log('input RMS: ' + rms(input));
    // console.log('input FFT RMS ' + rms_spect(input_fft));
    // console.log('Filt RMS: ' + rms(headphoneFilter));
    // console.log('Filt FFT RMS: ' + rms_spect(filt_fft));
    //
    // let output_fft:ComplexContainer = {
    //   real: new Float32Array(input_fft.real.length),
    //   imag: new Float32Array(input_fft.imag.length)
    // };
    // for (let i = 0; i < output_fft.real.length; i++) {
    //   let a = input_fft.real[i];
    //   let b = input_fft.imag[i];
    //   let c = filt_fft.real[i];
    //   let d = filt_fft.imag[i];
    //   output_fft.real[i] = a*c - b*d;
    //   output_fft.imag[i] = a*d + b*c;
    // }
    // console.log('Output FFT RMS: ' + rms_spect(output_fft));
    // let output_padded = ifft(output_fft, nfft);
    // console.log('Output IFFT RMS: ' + rms(output_padded));
    var output_norm = setSignalLevel(output, targetLevel - calLevel - fixedAttenuation, false);
    return output_norm;
}
exports.calfilter = calfilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGNBQXFCLEVBQVM7SUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRkQsb0JBRUM7QUFFRCxjQUFxQixDQUFRO0lBQzNCLE1BQU0sQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRkQsb0JBRUM7QUFFRCxhQUFvQixDQUFjO0lBQ2hDLElBQUksTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEIsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFSRCxrQkFRQztBQUVELGdCQUF1QixDQUFjO0lBQ25DLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2xDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFD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LENBQUM7Z0JBQ3ZDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNoQyxDQUFDO1lBQ0QsS0FBSyxDQUFDO1FBQ1IsQ0FBQztRQUNELEtBQUssVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQzdCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUN2QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUUsQ0FBQztZQUNELEtBQUssQ0FBQztRQUNSLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUNELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNsRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUNELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFDcEQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXJELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQWpDRCxrQ0FpQ0M7QUFFRCxtQkFBMEIsZUFBNEIsRUFBRSxRQUFlLEVBQ25FLFdBQWtCLEVBQUUsS0FBa0I7SUFFeEMsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFFMUIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixJQUFJLFFBQVEsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO0lBQ3RDLElBQUksWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLFNBQVMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxVQUFVLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7SUFDeEUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QixJQUFJLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFDcEUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRS9ELHdEQUF3RDtJQUN4RCxrREFBa0Q7SUFDbEQscUNBQXFDO0lBQ3JDLDRDQUE0QztJQUM1QyxvQ0FBb0M7SUFDcEMsRUFBRTtJQUNGLGlFQUFpRTtJQUNqRSwwREFBMEQ7SUFDMUQsMkNBQTJDO0lBQzNDLHdEQUF3RDtJQUN4RCxvREFBb0Q7SUFDcEQsdURBQXVEO0lBQ3ZELEVBQUU7SUFDRixzQ0FBc0M7SUFDdEMsbURBQW1EO0lBQ25ELGtEQUFrRDtJQUNsRCxLQUFLO0lBQ0wscURBQXFEO0lBQ3JELCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0IsOEJBQThCO0lBQzlCLDhCQUE4QjtJQUM5QixvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLElBQUk7SUFDSiwyREFBMkQ7SUFDM0QsOENBQThDO0lBQzlDLHlEQUF5RDtJQUV6RCxJQUFJLFdBQVcsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLFdBQVcsR0FBRyxRQUFRLEdBQUcsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFM0YsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBOUNELDhCQThDQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGZ1bmN0aW9uIGRiMmEoZGI6bnVtYmVyKSB7XG4gIHJldHVybiBNYXRoLnBvdygxMCwgZGIvMjApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYTJkYihhOm51bWJlcikge1xuICByZXR1cm4gMjAqTWF0aC5sb2cxMChhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1heCh4OkZsb2F0MzJBcnJheSk6bnVtYmVyIHtcbiAgbGV0IG1heHZhbCA9IC1JbmZpbml0eTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHhbaV0gPiBtYXh2YWwpIHtcbiAgICAgIG1heHZhbCA9IHhbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXh2YWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNOYW4oeDpGbG9hdDMyQXJyYXkpOmJvb2xlYW4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHhbaV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWluKHg6RmxvYXQzMkFycmF5KTpudW1iZXIge1xuICBsZXQgbWludmFsID0gSW5maW5pdHk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4W2ldIDwgbWludmFsKSB7XG4gICAgICBtaW52YWwgPSB4W2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWludmFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGVhZCh4OkZsb2F0MzJBcnJheSwgbjpudW1iZXIpOkZsb2F0MzJBcnJheSB7XG4gIGxldCBvdXRwdXQgPSBuZXcgRmxvYXQzMkFycmF5KG4pO1xuICBsZXQgc3RyID0gXCJcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBzdHIgKz0geFtpXSArIFwiIFwiO1xuICAgIG91dHB1dFtpXSA9IHhbaV07XG4gIH1cbiAgY29uc29sZS5sb2coc3RyKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFicyh4OkZsb2F0MzJBcnJheSk6RmxvYXQzMkFycmF5IHtcbiAgbGV0IHkgPSBuZXcgRmxvYXQzMkFycmF5KHgubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgeVtpXSA9IE1hdGguYWJzKHhbaV0pO1xuICB9XG4gIHJldHVybiB5O1xufVxuXG4vKiogR2VuZXJhdGUgbm9ybWFsbHkgZGlzdHJpYnV0ZWQgc2FtcGxlcyB3aXRoIHRoZSBNYXJzYWdsaWEgcG9sYXIgbWV0aG9kLFxuKiB3aGljaCB0cmFuc2Zvcm1zIHVuaWZvcm1seSBkaXN0cmlidXRlZCB2YXJpYWJsZXMgdG8gbm9ybWFsIGRpc3RyaWJ1dGlvbi5cbiogQHBhcmFtIG1lYW4gRGVzaXJlZCBtZWFuIG9mIHRoZSBub3JtYWwgZGlzdHJpYnV0aW9uXG4qIEBwYXJhbSBzdGQgRGVzaXJlZCBzdGFuZGFyZCBkZXZpYXRpb24gb2YgdGhlIG5vcm1hbCBkaXN0cmlidXRpb25cbiogQHJldHVybnMgQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgcmFuZG9tIHNhbXBsZSBmcm9tIHRoZSBkZXNpcmVkIGRpc3RyaWJ1dGlvbiB3aGVuIGNhbGxlZFxuKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZG4obWVhbjpudW1iZXIsIHN0ZDpudW1iZXIpIHtcbiAgdmFyIGhhc1NwYXJlU2FtcGxlOmJvb2xlYW4gPSBmYWxzZTtcbiAgdmFyIHNwYXJlU2FtcGxlOm51bWJlcjtcblxuICByZXR1cm4gZnVuY3Rpb24oKTpudW1iZXIge1xuICAgIGlmIChoYXNTcGFyZVNhbXBsZSkge1xuICAgICAgaGFzU3BhcmVTYW1wbGUgPSBmYWxzZTtcbiAgICAgIHJldHVybiBzcGFyZVNhbXBsZSAqIHN0ZCArIG1lYW47XG4gICAgfSBlbHNlIHtcblxuICAgICAgbGV0IHU6bnVtYmVyLCB2Om51bWJlciwgczpudW1iZXI7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgdSA9IE1hdGgucmFuZG9tKCkqMiAtIDE7XG4gICAgICAgIHYgPSBNYXRoLnJhbmRvbSgpKjIgLSAxO1xuICAgICAgICBzID0gKHUqdSkgKyAodip2KTtcbiAgICAgIH0gd2hpbGUgKHMgPj0gMSB8fCBzID09IDApO1xuXG4gICAgICBsZXQgbXVsOm51bWJlciA9IE1hdGguc3FydCgtMi4wICogTWF0aC5sb2cocykgLyBzKTtcbiAgICAgIHNwYXJlU2FtcGxlID0gdiAqIG11bDtcbiAgICAgIGhhc1NwYXJlU2FtcGxlID0gdHJ1ZTtcbiAgICAgIHJldHVybiBtZWFuICsgKHN0ZCAqIHUgKiBtdWwpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXhDb250YWluZXIge1xuICByZWFsOiBGbG9hdDMyQXJyYXk7XG4gIGltYWc6IEZsb2F0MzJBcnJheTtcbn07XG5cbi8qKlxuKiBUYWtlcyBhIGZvdXJpZXIgdHJhbnNmb3JtIG9mIGEgc2lnbmFsIGFuZCByZXR1cm5zIGEgY29weSB3aGVyZVxuKiB0aGUgY29lZmZpY2llbnRzIG91dHNpZGUgdGhlIHBhc3NiYW5kIGFyZSBzZXQgdG8gemVyb1xuKlxuKiBAcGFyYW0gaW4gSW5wdXQgdmVjdG9yIGNvbnRhaW5pbmcgYSBzaWduYWwncyBkaXNjcmV0ZSBmb3VyaWVyIHRyYW5zZm9ybVxuKiBAcGFyYW0gZmxvdyBMb3dlciBjdXRvZmYgZnJlcXVlbmN5IGluIEh6XG4qIEBwYXJhbSBmaGlnaCBVcHBlciBjdXRvZmYgZnJlcXVlbmN5IGluIEh6XG4qIEBwYXJhbSBmcyBTYW1wbGluZyByYXRlIGluIEh6XG4qIEByZXR1cm5zIEEgZm91cmllciB0cmFuc2Zvcm0gb2YgYSBzaWduYWwgd2hlcmUgb25seSB0aGUgcGFzc2JhbmQgaXMgbm9uemVyb1xuKi9cbmV4cG9ydCBmdW5jdGlvbiBib3hjYXJfc3BlY3RydW0oaW5wdXQ6Q29tcGxleENvbnRhaW5lciwgZmxvdzpudW1iZXIsIGZoaWdoOm51bWJlciwgZnM6bnVtYmVyKTpDb21wbGV4Q29udGFpbmVyIHtcbiAgbGV0IGxlbiA9IGlucHV0LnJlYWwubGVuZ3RoO1xuICBsZXQgZmxvd19pZHggPSBNYXRoLnJvdW5kKGZsb3cqbGVuLyhmcy8yKSk7XG4gIGxldCBmaGlnaF9pZHggPSBNYXRoLnJvdW5kKGZoaWdoKmxlbi8oZnMvMikpO1xuICBsZXQgY3V0X3JlYWwgPSBuZXcgRmxvYXQzMkFycmF5KGxlbik7XG4gIGxldCBjdXRfaW1hZyA9IG5ldyBGbG9hdDMyQXJyYXkobGVuKTtcblxuICAvLyBjb25zb2xlLmxvZyhcIkJPWENBUjogZmxvdyBcIiArIGZsb3cgKyBcIiBmaGlnaCBcIiArIGZoaWdoICsgXCIgLyBmcy8yIFwiICsgKGZzLzIpKTtcbiAgLy8gY29uc29sZS5sb2coJ0JPWENBUjogZmxvd19pZHg6ICcgKyBmbG93X2lkeCArICcsIGZoaWdoX2lkeDogJyArIGZoaWdoX2lkeCArICcgLyBsZW4gJyArIGxlbik7XG5cbiAgY3V0X3JlYWwuc2V0KGlucHV0LnJlYWwuc2xpY2UoZmxvd19pZHgsIGZoaWdoX2lkeCArIDEpLCBmbG93X2lkeCk7XG4gIGN1dF9pbWFnLnNldChpbnB1dC5pbWFnLnNsaWNlKGZsb3dfaWR4LCBmaGlnaF9pZHggKyAxKSwgZmxvd19pZHgpO1xuICBpZiAoZmxvd19pZHggPT0gMCkge1xuICAgIGN1dF9yZWFsWzBdID0gaW5wdXQucmVhbFswXTtcbiAgfVxuICBpZiAoZmhpZ2hfaWR4ID09IGxlbikge1xuICAgIGN1dF9pbWFnWzBdID0gaW5wdXQuaW1hZ1swXTtcbiAgfVxuXG4gIGxldCBvdXRwdXQ6Q29tcGxleENvbnRhaW5lciA9IHtcbiAgICByZWFsOiBjdXRfcmVhbCxcbiAgICBpbWFnOiBjdXRfaW1hZ1xuICB9O1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBybXMoaW5wdXQ6RmxvYXQzMkFycmF5KTpudW1iZXIge1xuICBsZXQgb3V0cHV0ID0gbmV3IGludGVyb3AuUmVmZXJlbmNlPG51bWJlcj4oKTtcbiAgdkRTUF9ybXNxdihpbnRlcm9wLmhhbmRsZW9mKGlucHV0KSwgMSwgb3V0cHV0LCBpbnB1dC5sZW5ndGgpO1xuICByZXR1cm4gb3V0cHV0LnZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm1zX3NwZWN0KGlucHV0OkNvbXBsZXhDb250YWluZXIpOm51bWJlciB7XG4gIGxldCBvdXRwdXQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0LnJlYWwubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXQgKz0gTWF0aC5wb3coaW5wdXQucmVhbFtpXSwyKSArIE1hdGgucG93KGlucHV0LmltYWdbaV0sMik7XG4gIH1cbiAgb3V0cHV0IC89IGlucHV0LnJlYWwubGVuZ3RoO1xuICByZXR1cm4gTWF0aC5zcXJ0KG91dHB1dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTaWduYWxMZXZlbChpbnB1dDpGbG9hdDMyQXJyYXksIHRhcmdldExldmVsZEI6IG51bWJlciwgbm9ybWFsaXplOmJvb2xlYW4pOkZsb2F0MzJBcnJheSB7XG4gIGxldCBvdXRwdXQgPSBuZXcgRmxvYXQzMkFycmF5KGlucHV0Lmxlbmd0aCk7XG4gIGxldCBybXNfdmFsdWUgPSBybXMoaW5wdXQpO1xuICBsZXQgdGFyZ2V0TGV2ZWxNdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIHRhcmdldExldmVsZEIvMjApO1xuICBsZXQgbXVsdGlwbGllciA9IHRhcmdldExldmVsTXVsdGlwbGllcjtcbiAgaWYgKG5vcm1hbGl6ZSkge1xuICAgIG11bHRpcGxpZXIgPSBtdWx0aXBsaWVyIC8gcm1zX3ZhbHVlO1xuICB9XG4gIGxldCBtdWx0aXBsaWVyX3JlZiA9IG5ldyBpbnRlcm9wLlJlZmVyZW5jZTxudW1iZXI+KG11bHRpcGxpZXIpO1xuICB2RFNQX3ZzbXVsKGludGVyb3AuaGFuZGxlb2YoaW5wdXQpLCAxLCBtdWx0aXBsaWVyX3JlZiwgaW50ZXJvcC5oYW5kbGVvZihvdXRwdXQpLCAxLCBpbnB1dC5sZW5ndGgpO1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZnQoaW5wdXQ6RmxvYXQzMkFycmF5LCBuZmZ0Om51bWJlcik6Q29tcGxleENvbnRhaW5lciB7XG4gIC8vY29uc29sZS5sb2coXCJJbnB1dCBsZW5ndGg6IFwiKyBpbnB1dC5sZW5ndGggKyBcIiBtYXg6IFwiICsgbWF4KGlucHV0KSArIFwiLCBtaW46IFwiICsgbWluKGlucHV0KSk7XG4gIC8vIGhlYWQoaW5wdXQsIDIwKTtcbiAgbGV0IGlucHV0X3BhZGRlZCA9IG5ldyBGbG9hdDMyQXJyYXkobmZmdCk7XG4gIGlucHV0X3BhZGRlZC5zZXQoaW5wdXQpO1xuICBsZXQgZmZ0X3NldHVwID0gdkRTUF9ERlRfenJvcF9DcmVhdGVTZXR1cChudWxsLCBuZmZ0LCB2RFNQX0RGVF9EaXJlY3Rpb24uRk9SV0FSRCk7XG4gIGlmIChmZnRfc2V0dXAgPT09IG51bGwpIHtcbiAgICBjb25zb2xlLmxvZyhcIkZGVCBzZXR1cCBmYWlsZWQhXCIpO1xuICB9IGVsc2Uge1xuICAgIC8vY29uc29sZS5sb2coXCJGRlQgc2V0dXAgdHlwZTogXCIgKyB0eXBlb2YoZmZ0X3NldHVwKSk7XG4gIH1cbiAgbGV0IGlyID0gbmV3IEZsb2F0MzJBcnJheShuZmZ0LzIpO1xuICBsZXQgaWkgPSBuZXcgRmxvYXQzMkFycmF5KG5mZnQvMik7XG4gIGxldCBvciA9IG5ldyBGbG9hdDMyQXJyYXkobmZmdC8yKTtcbiAgbGV0IG9pID0gbmV3IEZsb2F0MzJBcnJheShuZmZ0LzIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5mZnQvMjsgaSsrKSB7XG4gICAgaWYgKE51bWJlci5pc05hTihpbnB1dF9wYWRkZWRbaSoyXSkgfHwgKGlucHV0X3BhZGRlZFtpKjJdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImlucHV0IFwiKyBpICsgXCIqMiBpcyBOYU5cIik7XG4gICAgfVxuICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXRfcGFkZGVkW2kqMiArIDFdKSkge1xuICAgICAgY29uc29sZS5sb2coXCJpbnB1dCBcIisgaSArIFwiKjIgKyAxIGlzIE5hTlwiKTtcbiAgICB9XG4gICAgaXJbaV0gPSBpbnB1dF9wYWRkZWRbaSoyXTtcbiAgICBpaVtpXSA9IGlucHV0X3BhZGRlZFtpKjIgKyAxXTtcbiAgfVxuICAvLyBjb25zb2xlLmxvZyhcIkZGVCBpbnB1dCBybXMgUFJFOiBoYXNOYU46IFwiICsgaGFzTmFuKGlyKSArIFwiLCByZWFsIG1heCAgXCIgKyBtYXgoaXIpICsgXCIsIG1pbiBcIiArIG1pbihpcikgKyBcIiwgaW1hZyBtYXggXCIgKyBtYXgoaWkpICsgXCIsIG1pbiBcIiArIG1pbihpaSkpO1xuXG4gIHZEU1BfREZUX0V4ZWN1dGUoZmZ0X3NldHVwLCBpbnRlcm9wLmhhbmRsZW9mKGlyKSwgaW50ZXJvcC5oYW5kbGVvZihpaSksXG4gICAgICAgICAgICAgICAgICBpbnRlcm9wLmhhbmRsZW9mKG9yKSwgaW50ZXJvcC5oYW5kbGVvZihvaSkpO1xuXG4gIGxldCBvdXRwdXQ6Q29tcGxleENvbnRhaW5lciA9IHtcbiAgICByZWFsOiBvcixcbiAgICBpbWFnOiBvaVxuICB9O1xuICAvLyBjb25zb2xlLmxvZyhcIkZGVCBvdXRwdXQgaGFzIE5hTiByZWFsOiBcIiArIGhhc05hbihvcikgKyBcIiwgaW1hZzogXCIrIGhhc05hbihpcikgKyBcIiBybXM6IFwiICsgcm1zX3NwZWN0KG91dHB1dCkgKyBcIiwgcmVhbCBtYXggIFwiICsgbWF4KG9yKSArIFwiLCBtaW4gXCIgKyBtaW4ob3IpICsgXCIsIGltYWcgbWF4IFwiICsgbWF4KG9pKSArIFwiLCBtaW4gXCIgKyBtaW4ob2kpKTtcblxuICB2RFNQX0RGVF9EZXN0cm95U2V0dXAoZmZ0X3NldHVwKTsgLy8gZnJlZSByZXNvdXJjZXNcblxuICAvLyBoZWFkKG91dHB1dC5yZWFsLCAyMCk7XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlmZnQoaW5wdXQ6Q29tcGxleENvbnRhaW5lciwgbmlmZnQpOkZsb2F0MzJBcnJheSB7XG4gIGxldCBpZmZ0X3NldHVwID0gdkRTUF9ERlRfenJvcF9DcmVhdGVTZXR1cChudWxsLCBuaWZmdCwgdkRTUF9ERlRfRGlyZWN0aW9uLklOVkVSU0UpO1xuXG4gIGxldCBvciA9IG5ldyBGbG9hdDMyQXJyYXkobmlmZnQvMik7XG4gIGxldCBvaSA9IG5ldyBGbG9hdDMyQXJyYXkobmlmZnQvMik7XG5cbiAgdkRTUF9ERlRfRXhlY3V0ZShpZmZ0X3NldHVwLCBpbnRlcm9wLmhhbmRsZW9mKGlucHV0LnJlYWwpLCBpbnRlcm9wLmhhbmRsZW9mKGlucHV0LmltYWcpLFxuICAgICAgICAgICAgICAgICAgaW50ZXJvcC5oYW5kbGVvZihvciksIGludGVyb3AuaGFuZGxlb2Yob2kpKTtcbiAgbGV0IG91dHB1dCA9IG5ldyBGbG9hdDMyQXJyYXkobmlmZnQpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5pZmZ0LzI7IGkrKykge1xuICAgIG91dHB1dFtpKjJdID0gb3JbaV0vbmlmZnQ7XG4gICAgb3V0cHV0W2kqMiArIDFdID0gb2lbaV0vbmlmZnQ7XG4gIH1cblxuICB2RFNQX0RGVF9EZXN0cm95U2V0dXAoaWZmdF9zZXR1cCk7XG5cbiAgLy8gY29uc29sZS5sb2coXCJJRkZUIG91dHB1dCBybXM6IFwiICsgcm1zKG91dHB1dCkpO1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKiBSZXR1cm4gdGhlIG5leHQgbnVtYmVyIGZyb20gbiB0aGF0IGlzIGEgcG93ZXIgb2YgdHdvICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dFBvd2VyT2YyKG46bnVtYmVyKTpudW1iZXIge1xuICByZXR1cm4gTWF0aC5wb3coMiwgTWF0aC5jZWlsKE1hdGgubG9nMihuKSkpO1xufVxuXG5leHBvcnQgZW51bSBXaW5kb3dUeXBlIHtcbiAgTGluZWFyLFxuICBSYWlzZWRDb3NpbmVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5V2luZG93KGlucHV0OkZsb2F0MzJBcnJheSwgd2luZG93VHlwZTpXaW5kb3dUeXBlLCBkdXJhdGlvbjpudW1iZXIsIGZzOm51bWJlcik6RmxvYXQzMkFycmF5IHtcbiAgbGV0IHJhbXBVcCA9IG5ldyBGbG9hdDMyQXJyYXkoTWF0aC5yb3VuZChkdXJhdGlvbiAqIGZzKSk7XG4gIHN3aXRjaCAod2luZG93VHlwZSkge1xuICAgIGNhc2UgV2luZG93VHlwZS5MaW5lYXI6IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFtcFVwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJhbXBVcFtpXSA9IGkgLyByYW1wVXAubGVuZ3RoO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgV2luZG93VHlwZS5SYWlzZWRDb3NpbmU6IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFtcFVwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJhbXBVcFtpXSA9ICgxICsgTWF0aC5jb3MoTWF0aC5QSSArIChpIC8gcmFtcFVwLmxlbmd0aCkgKiBNYXRoLlBJKSkgLyAyO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgbGV0IHdpbiA9IG5ldyBGbG9hdDMyQXJyYXkoaW5wdXQubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW1wVXAubGVuZ3RoOyBpKyspIHtcbiAgICB3aW5baV0gPSByYW1wVXBbaV07XG4gIH1cbiAgZm9yIChsZXQgaSA9IHJhbXBVcC5sZW5ndGg7IGkgPCAod2luLmxlbmd0aCAtIHJhbXBVcC5sZW5ndGgpOyBpKyspIHtcbiAgICB3aW5baV0gPSAxO1xuICB9XG4gIGZvciAobGV0IGkgPSAod2luLmxlbmd0aCAtIHJhbXBVcC5sZW5ndGgpLCBqID0gcmFtcFVwLmxlbmd0aCAtIDE7IGkgPCB3aW4ubGVuZ3RoOyBpKyssIGotLSkge1xuICAgIHdpbltpXSA9IHJhbXBVcFtqXTtcbiAgfVxuXG4gIGxldCBvdXRwdXQgPSBuZXcgRmxvYXQzMkFycmF5KGlucHV0Lmxlbmd0aCk7XG4gIHZEU1Bfdm11bChpbnRlcm9wLmhhbmRsZW9mKGlucHV0KSwgMSwgaW50ZXJvcC5oYW5kbGVvZih3aW4pLCAxLFxuICAgICAgICAgICAgaW50ZXJvcC5oYW5kbGVvZihvdXRwdXQpLCAxLCBpbnB1dC5sZW5ndGgpO1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxmaWx0ZXIoaGVhZHBob25lRmlsdGVyOkZsb2F0MzJBcnJheSwgY2FsTGV2ZWw6bnVtYmVyLFxuICAgIHRhcmdldExldmVsOm51bWJlciwgaW5wdXQ6RmxvYXQzMkFycmF5KTpGbG9hdDMyQXJyYXkge1xuXG4gIGxldCBmaXhlZEF0dGVudWF0aW9uID0gMTg7XG5cbiAgbGV0IGxlbl9pbnB1dCA9IGlucHV0Lmxlbmd0aDtcbiAgbGV0IGxlbl9maWx0ID0gaGVhZHBob25lRmlsdGVyLmxlbmd0aDtcbiAgbGV0IGlucHV0X3BhZGRlZCA9IG5ldyBGbG9hdDMyQXJyYXkobGVuX2lucHV0ICsgbGVuX2ZpbHQgLSAxKTtcbiAgbGV0IHJtczFfaW5wdXQgPSBzZXRTaWduYWxMZXZlbChpbnB1dCwgMCwgdHJ1ZSk7IC8vIG5vcm1hbGl6ZSB0byBSTVMgPSAxXG4gIGlucHV0X3BhZGRlZC5zZXQocm1zMV9pbnB1dCk7XG4gIGxldCBvdXRwdXQgPSBuZXcgRmxvYXQzMkFycmF5KGxlbl9pbnB1dCk7XG4gIHZEU1BfZGVzYW1wKGludGVyb3AuaGFuZGxlb2YoaW5wdXRfcGFkZGVkKSwgMSwgaW50ZXJvcC5oYW5kbGVvZihoZWFkcGhvbmVGaWx0ZXIpLFxuICAgICAgICAgICAgICBpbnRlcm9wLmhhbmRsZW9mKG91dHB1dCksIG91dHB1dC5sZW5ndGgsIGxlbl9maWx0KTtcblxuICAvLyBsZXQgbmZmdCA9IGdldE5leHRQb3dlck9mMihsZW5faW5wdXQgKyBsZW5fZmlsdCAtIDEpO1xuICAvLyBsZXQgcm1zMV9pbnB1dF9wYWRkZWQgPSBuZXcgRmxvYXQzMkFycmF5KG5mZnQpO1xuICAvLyBybXMxX2lucHV0X3BhZGRlZC5zZXQocm1zMV9pbnB1dCk7XG4gIC8vIGxldCBmaWx0X3BhZGRlZCA9IG5ldyBGbG9hdDMyQXJyYXkobmZmdCk7XG4gIC8vIGZpbHRfcGFkZGVkLnNldChoZWFkcGhvbmVGaWx0ZXIpO1xuICAvL1xuICAvLyBsZXQgaW5wdXRfZmZ0OkNvbXBsZXhDb250YWluZXIgPSBmZnQocm1zMV9pbnB1dF9wYWRkZWQsIG5mZnQpO1xuICAvLyBsZXQgZmlsdF9mZnQ6Q29tcGxleENvbnRhaW5lciA9IGZmdChmaWx0X3BhZGRlZCwgbmZmdCk7XG4gIC8vIGNvbnNvbGUubG9nKCdpbnB1dCBSTVM6ICcgKyBybXMoaW5wdXQpKTtcbiAgLy8gY29uc29sZS5sb2coJ2lucHV0IEZGVCBSTVMgJyArIHJtc19zcGVjdChpbnB1dF9mZnQpKTtcbiAgLy8gY29uc29sZS5sb2coJ0ZpbHQgUk1TOiAnICsgcm1zKGhlYWRwaG9uZUZpbHRlcikpO1xuICAvLyBjb25zb2xlLmxvZygnRmlsdCBGRlQgUk1TOiAnICsgcm1zX3NwZWN0KGZpbHRfZmZ0KSk7XG4gIC8vXG4gIC8vIGxldCBvdXRwdXRfZmZ0OkNvbXBsZXhDb250YWluZXIgPSB7XG4gIC8vICAgcmVhbDogbmV3IEZsb2F0MzJBcnJheShpbnB1dF9mZnQucmVhbC5sZW5ndGgpLFxuICAvLyAgIGltYWc6IG5ldyBGbG9hdDMyQXJyYXkoaW5wdXRfZmZ0LmltYWcubGVuZ3RoKVxuICAvLyB9O1xuICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dF9mZnQucmVhbC5sZW5ndGg7IGkrKykge1xuICAvLyAgIGxldCBhID0gaW5wdXRfZmZ0LnJlYWxbaV07XG4gIC8vICAgbGV0IGIgPSBpbnB1dF9mZnQuaW1hZ1tpXTtcbiAgLy8gICBsZXQgYyA9IGZpbHRfZmZ0LnJlYWxbaV07XG4gIC8vICAgbGV0IGQgPSBmaWx0X2ZmdC5pbWFnW2ldO1xuICAvLyAgIG91dHB1dF9mZnQucmVhbFtpXSA9IGEqYyAtIGIqZDtcbiAgLy8gICBvdXRwdXRfZmZ0LmltYWdbaV0gPSBhKmQgKyBiKmM7XG4gIC8vIH1cbiAgLy8gY29uc29sZS5sb2coJ091dHB1dCBGRlQgUk1TOiAnICsgcm1zX3NwZWN0KG91dHB1dF9mZnQpKTtcbiAgLy8gbGV0IG91dHB1dF9wYWRkZWQgPSBpZmZ0KG91dHB1dF9mZnQsIG5mZnQpO1xuICAvLyBjb25zb2xlLmxvZygnT3V0cHV0IElGRlQgUk1TOiAnICsgcm1zKG91dHB1dF9wYWRkZWQpKTtcblxuICBsZXQgb3V0cHV0X25vcm0gPSBzZXRTaWduYWxMZXZlbChvdXRwdXQsIHRhcmdldExldmVsIC0gY2FsTGV2ZWwgLSBmaXhlZEF0dGVudWF0aW9uLCBmYWxzZSk7XG5cbiAgcmV0dXJuIG91dHB1dF9ub3JtO1xufVxuIl19